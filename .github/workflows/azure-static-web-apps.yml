name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

# Add permissions block to allow package writes
permissions:
  contents: read
  packages: write
  pull-requests: write
  statuses: write

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false
      
      # Debug information for troubleshooting
      - name: Debug Deployment Context
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Base Ref: ${{ github.base_ref }}"
          echo "Head Ref: ${{ github.head_ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "Deployment target: ${{ github.ref == 'refs/heads/main' && 'Production (main)' || (github.ref == 'refs/heads/develop' && 'Staging (develop)' || 'PR Preview') }}"
      
      # Setup .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      # Cache NuGet packages
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      # Build Blazor WebAssembly app
      - name: Build Blazor WebAssembly App
        run: |
          # Determine environment based on branch or PR
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            ENVIRONMENT_NAME="Staging"
            echo "Building for Staging environment (PR)"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT_NAME="Production"
            echo "Building for Production environment (main)"
          else
            ENVIRONMENT_NAME="Staging"
            echo "Building for Staging environment (develop)"
          fi
          
          echo "Starting build process for $ENVIRONMENT_NAME"
          dotnet restore ./FarhanS.Portfolio/src/Web/FarhanS.Portfolio.csproj
          
          # Handle environment-specific appsettings
          if [[ "$ENVIRONMENT_NAME" == "Staging" && ! -f "./FarhanS.Portfolio/src/Web/wwwroot/appsettings.Staging.json" ]]; then
            echo "Creating appsettings.Staging.json from production settings"
            cp ./FarhanS.Portfolio/src/Web/wwwroot/appsettings.json ./FarhanS.Portfolio/src/Web/wwwroot/appsettings.Staging.json
          fi
          
          # Build and publish
          dotnet build ./FarhanS.Portfolio/src/Web/FarhanS.Portfolio.csproj -c Release -p:Configuration=Release -p:EnvironmentName=$ENVIRONMENT_NAME
          dotnet publish ./FarhanS.Portfolio/src/Web/FarhanS.Portfolio.csproj -c Release -p:Configuration=Release -p:EnvironmentName=$ENVIRONMENT_NAME -o ./publish
          
          # List published files for verification
          echo "Published files in ./publish/wwwroot directory:"
          ls -la ./publish/wwwroot
      
      # Run unit tests
      - name: Run Unit Tests
        run: dotnet test ./FarhanS.Portfolio/tests/UnitTests/UnitTests.csproj --configuration Release --no-build
      
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./FarhanS.Portfolio
          file: ./FarhanS.Portfolio/src/Web/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/portfolio:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/portfolio:${{ github.ref == 'refs/heads/main' && 'latest' || 'staging' }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.version=${{ github.ref_name }}
      
      # Set deployment environment based on context
      - name: Set Deployment Environment
        id: set_env
        run: |
          # For PR: use PR-specific environment name
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "DEPLOY_ENV=pr-${{ github.event.number }}" >> $GITHUB_ENV
            echo "Setting PR preview environment: pr-${{ github.event.number }}"
          
          # For main branch: use production environment (empty string)
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEPLOY_ENV=" >> $GITHUB_ENV
            echo "Setting production environment (main branch)"
          
          # For develop branch: use a named environment
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
            echo "Setting staging environment (develop branch)"
          
          # For other branches: use branch name
          else
            BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
            echo "DEPLOY_ENV=$BRANCH_NAME" >> $GITHUB_ENV
            echo "Setting branch-specific environment: $BRANCH_NAME"
          fi
      
      # Deploy to Azure Static Web Apps
      - name: Deploy to Azure Static Web Apps
        id: deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "./publish/wwwroot"
          api_location: ""
          output_location: ""
          skip_app_build: true
          deployment_environment: ${{ env.DEPLOY_ENV }}
          verbose: true

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "close"
          deployment_environment: pr-${{ github.event.number }}