@inject IJSRuntime JSRuntime

<div class="navbar-container">
    <div class="navbar-brand-container">
        <a class="navbar-brand" href="">Farhan S.</a>
        <button title="Navigation menu" class="navbar-toggler @(collapseNavMenu ? "" : "menu-open")" @onclick="ToggleNavMenu">
            <div class="hamburger-menu">
                <span class="line line-1"></span>
                <span class="line line-2"></span>
                <span class="line line-3"></span>
            </div>
        </button>
    </div>

    <div class="@NavMenuCssClass nav-scrollable" style="@NavMenuStyle">
        <nav class="nav-menu">
            <div class="nav-item">
                <NavLink class="nav-link" href="#about" @onclick="CloseNavMenuOnMobile">
                    <span class="bi bi-person-fill nav-icon" aria-hidden="true"></span> About
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="#experience" @onclick="CloseNavMenuOnMobile">
                    <span class="bi bi-briefcase-fill nav-icon" aria-hidden="true"></span> Experience
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="#skills" @onclick="CloseNavMenuOnMobile">
                    <span class="bi bi-tools nav-icon" aria-hidden="true"></span> Skills
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="#education" @onclick="CloseNavMenuOnMobile">
                    <span class="bi bi-mortarboard-fill nav-icon" aria-hidden="true"></span> Education
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="#contact" @onclick="CloseNavMenuOnMobile">
                    <span class="bi bi-envelope-fill nav-icon" aria-hidden="true"></span> Contact
                </NavLink>
            </div>
        </nav>
    </div>
</div>

@code {
    private bool collapseNavMenu = true; // Default to collapsed on mobile
    private bool isMobileView = false;
    
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : "show";
    
    // Add animation style
    private string NavMenuStyle => !collapseNavMenu 
        ? "animation: slideDownFade 0.3s ease-in-out forwards;" 
        : "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check screen size on initial load
            isMobileView = await JSRuntime.InvokeAsync<bool>("eval", "window.innerWidth < 769");
            
            // Set initial state based on screen size
            collapseNavMenu = isMobileView;
            
            // Register window resize event for responsive behavior
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.addEventListener('resize', function() {
                    const isMobile = window.innerWidth < 769;
                    
                    // Toggle navbar display based on screen size
                    if (isMobile) {
                        document.querySelector('.navbar-toggler').classList.remove('d-none');
                    } else {
                        // On desktop, ensure menu is always visible
                        document.querySelector('.nav-scrollable').classList.remove('collapse');
                        document.querySelector('.nav-scrollable').classList.add('show');
                    }
                    
                    // Notify Blazor component of screen size change
                    if (isMobile !== window.lastMobileState) {
                        window.lastMobileState = isMobile;
                        DotNet.invokeMethodAsync('FarhanS.Portfolio', 'HandleNavMenuScreenSizeChange', isMobile);
                    }
                });
                
                // Add click listener to close menu when clicking outside
                document.addEventListener('click', function(e) {
                    if (window.innerWidth < 769) {
                        const navContainer = document.querySelector('.navbar-container');
                        const isVisible = !document.querySelector('.nav-scrollable').classList.contains('collapse');
                        
                        if (isVisible && navContainer && !navContainer.contains(e.target)) {
                            DotNet.invokeMethodAsync('FarhanS.Portfolio', 'CloseNavMenu');
                        }
                    }
                });
                
                // Initialize screen state tracking
                window.lastMobileState = window.innerWidth < 769;
                
                // Add CSS for hamburger menu animation
                if (!document.getElementById('hamburger-animation-style')) {
                    const style = document.createElement('style');
                    style.id = 'hamburger-animation-style';
                    style.textContent = `
                        .hamburger-menu {
                            width: 24px;
                            height: 20px;
                            position: relative;
                            display: flex;
                            flex-direction: column;
                            justify-content: space-between;
                        }
                        
                        .line {
                            display: block;
                            width: 100%;
                            height: 2px;
                            background-color: var(--primary-color, #3a9e7e);
                            border-radius: 10px;
                            transition: transform 0.3s ease, opacity 0.3s ease;
                        }
                        
                        .menu-open .line-1 {
                            transform: translateY(9px) rotate(45deg);
                        }
                        
                        .menu-open .line-2 {
                            opacity: 0;
                        }
                        
                        .menu-open .line-3 {
                            transform: translateY(-9px) rotate(-45deg);
                        }
                    `;
                    document.head.appendChild(style);
                }
            ");
            
            StateHasChanged();
        }
    }

    [JSInvokable]
    public static Task HandleNavMenuScreenSizeChange(bool isMobile)
    {
        if (Current != null)
        {
            Current.isMobileView = isMobile;
            
            // On desktop, ensure menu is visible
            if (!isMobile)
            {
                Current.collapseNavMenu = false;
            }
            // On mobile, ensure menu starts collapsed
            else if (isMobile && !Current.collapseNavMenu)
            {
                Current.collapseNavMenu = true;
            }
            
            Current.StateHasChanged();
        }
        
        return Task.CompletedTask;
    }
    
    [JSInvokable]
    public static Task CloseNavMenu()
    {
        if (Current != null && !Current.collapseNavMenu)
        {
            Current.collapseNavMenu = true;
            Current.StateHasChanged();
        }
        
        return Task.CompletedTask;
    }
    
    // Static reference to current instance for JS callbacks
    private static NavMenu Current { get; set; }
    
    protected override void OnInitialized()
    {
        Current = this;
        base.OnInitialized();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    
    private void CloseNavMenuOnMobile()
    {
        // Only close the menu if we're on mobile
        if (isMobileView)
        {
            collapseNavMenu = true;
        }
    }
}
